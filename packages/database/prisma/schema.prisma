// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["metrics"]
  binaryTargets   = ["native", "linux-musl"]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@index([userId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                    String                  @id @default(cuid())
  name                  String?
  email                 String                  @unique
  emailVerified         DateTime?
  image                 String?
  accounts              Account[]
  sessions              Session[]
  coins                 UserCoin[]
  role                  UserRole                @default(USER)
  messagesFrom          Message[]               @relation("messagesFrom")
  messagesTo            Message[]               @relation("messagesTo")
  coinsWishlist         CoinWishlist[]
  coinsRefWishlist      CoinRefWishlist[]
  contacts              Contact[]
  userContacts          Contact[]               @relation("userContact")
  historyUserCoinsPrice HistoryUserCoinsPrice[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@id([identifier, token])
}

model Country {
  code     String    @unique
  name     String
  catalogs Catalog[]
}

model CoinRef {
  id              String         @id @default(cuid())
  coins           Coin[]
  type            CoinType
  denomination    String
  composition     String?
  weight          Float?
  diameter        Float?
  thickness       Float?
  edgeType        String?
  edgeDescription String?
  shape           String?
  alignment       CoinAlignment?

  catalog   Catalog @relation(fields: [catalogId], references: [id])
  catalogId String

  obverseCreator     String?
  obverseDescription String?
  observeImage       String?

  reverseCreator     String?
  reverseDescription String?
  reverseImage       String?

  created_at          DateTime              @default(now())
  updated_at          DateTime?             @updatedAt
  wishlist            CoinRefWishlist[]
  historyCoinRefPrice HistoryCoinRefPrice[]

  @@index([catalogId])
}

model Coin {
  id    String  @id @default(cuid())
  year  Int?
  ref   CoinRef @relation(fields: [refId], references: [id])
  refId String

  mintageQtyUNC Int?
  mintageQtyBU  Int?
  mintageQtyPRF Int?

  observeImage String?
  reverseImage String?

  usersCoin UserCoin[]

  created_at       DateTime           @default(now())
  updated_at       DateTime?          @updatedAt
  wishlist         CoinWishlist[]
  historyCoinPrice HistoryCoinPrice[]

  @@index([refId])
}

model Catalog {
  id          String    @id @default(cuid())
  name        String
  coinsRef    CoinRef[]
  country     Country   @relation(fields: [countryCode], references: [code])
  countryCode String

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  @@index([name])
  @@index([countryCode])
}

model UserCoin {
  id           String        @id @default(cuid())
  condition    CoinCondition
  comment      String?
  price        Float?
  exchangeable Boolean       @default(false)
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  coin         Coin          @relation(fields: [coinId], references: [id], onDelete: Cascade)
  coinId       String

  observeImage String?
  reverseImage String?

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  @@index([userId])
  @@index([coinId])
}

model Message {
  id      String   @id @default(cuid())
  message String
  read    Boolean  @default(false)
  date    DateTime @default(now())

  from   User   @relation("messagesFrom", fields: [fromId], references: [id], onDelete: Cascade)
  fromId String
  to     User   @relation("messagesTo", fields: [toId], references: [id], onDelete: Cascade)
  toId   String

  created_at DateTime @default(now())

  @@index([fromId])
  @@index([toId])
}

model CoinWishlist {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  coin   Coin   @relation(fields: [coinId], references: [id], onDelete: Cascade)
  coinId String

  created_at DateTime @default(now())

  @@unique([userId, coinId])
  @@index([userId])
  @@index([coinId])
}

model CoinRefWishlist {
  id        String  @id @default(cuid())
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  coinRef   CoinRef @relation(fields: [coinRefId], references: [id], onDelete: Cascade)
  coinRefId String

  created_at DateTime @default(now())

  @@unique([userId, coinRefId])
  @@index([userId])
  @@index([coinRefId])
}

model Contact {
  id            String @id @default(cuid())
  user          User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  userContact   User   @relation("userContact", fields: [userContactId], references: [id], onDelete: Cascade)
  userContactId String

  created_at DateTime @default(now())

  @@unique([userId, userContactId])
  @@index([userId])
  @@index([userContactId])
}

model HistoryCoinPrice {
  id         String   @id @default(cuid())
  coin       Coin     @relation(fields: [coinId], references: [id], onDelete: Cascade)
  coinId     String
  price      Float
  date       DateTime
  created_at DateTime @default(now())

  @@index([coinId])
}

model HistoryCoinRefPrice {
  id         String   @id @default(cuid())
  coinRef    CoinRef  @relation(fields: [coinRefId], references: [id], onDelete: Cascade)
  coinRefId  String
  price      Float
  date       DateTime
  created_at DateTime @default(now())

  @@index([coinRefId])
}

model HistoryUserCoinsPrice {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  price      Float
  date       DateTime
  created_at DateTime @default(now())

  @@index([userId])
}

enum CoinCondition {
  G
  VG
  F
  VF
  XF
  UNC
  BU
  PRF
}

enum CoinType {
  CIRCULATION
  COLLECTOR
  COMMEMORATIVE
}

enum CoinAlignment {
  MEDAL
  COIN
  VARIOUS
}

enum UserRole {
  ADMIN
  USER
}
